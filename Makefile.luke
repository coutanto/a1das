# 
# settings for a linux server running on UGA datacenter with all libraries available through Nix

#
# where MKL static & dynamic libs are located
#
MKLROOT=/nix/store/xrkcw6vrq51fkaq698inh5x0v8047ylm-mkl-2020.1.217
# All mkl libraries have been imported from another computer and stored locally
MKLLIB=$(BASE)/A1-LINUX-MKL

#
# python & numpy include files
#
# run configure_var.sh before
# including this file
include $(BASE)/Makefile.python

#
# static Linking options
#
# 1) to be used with gfortran linker
#
LDFLAGS_STATIC_FC = -Wl,--start-group ${MKLLIB}/libmkl_gf_lp64.a ${MKLLIB}/libmkl_core.a ${MKLLIB}/libmkl_gnu_thread.a -Wl,--end-group -lgomp -lpthread -lm -ldl

# 2) to be used with f2py linker
#
# without <-Wl,--start-group> <-Wl,--end-group> the linux linker is not able to resolve cross-reference symbols in different libs
# But f2py do not accept these option. We add several time the same lib to solve these cross-refs with f2py
#
# fast & dirty way
LDFLAGS_STATIC = ${MKLLIB}/libmkl_gf_lp64.a ${MKLLIB}/libmkl_core.a ${MKLLIB}/libmkl_gnu_thread.a ${MKLLIB}/libmkl_core.a ${MKLLIB}/libmkl_gnu_thread.a -lgomp -lpthread ${MKLLIB}/libmkl_core.a -lm -ldl
# more elegant, assuming that we coudl create our own static mkl bundle, see README in ../A1-LINUX-MKL
LDFLAGS_STATIC = ../A1-LINUX-MKL/liba1mkl.a -lgomp -lpthread -lm -ldl

#
# python linking option
#
PYTHONFLAG= -shared

